'use strict';

var schemas = "<script>\r\n  [\r\n      {\r\n          type: \"list\",\r\n          prop: \"tableCols\",\r\n          label: \"表格\",\r\n          schemas: [\r\n              {type: \"text\", prop: \"label\", label: \"表头\",},\r\n              {type: \"text\", prop: \"prop\", label: \"后端字段\",},\r\n              {type: \"text\", prop: \"width\", label: \"列宽\",},\r\n              {\r\n                  type: \"code\",\r\n                  label: \"格式化\",\r\n                  prop: \"formatter\",\r\n                  width: 60,\r\n                  tips: `\r\n<div style=\"line-height: 20px;\">\r\n<p>自定义一个用于格式化数据的方法，默认直接展示该字段原始值。</p>\r\n<p>须遵循ES规范，示例如下：</p>\r\n<div style=\"margin-top: 6px;background: #f2f4fa;padding: 4px 8px;\">\r\n<pre>\r\nexport default function(row) {\r\nreturn row.price / 1000 + \"元\"\r\n}\r\n</pre>\r\n</div>\r\n</div>\r\n`\r\n              },\r\n          ],\r\n      },\r\n      {\r\n          type: \"list\",\r\n          prop: \"searchItems\",\r\n          label: \"查询\",\r\n          schemas: [\r\n              {type: \"text\", prop: \"label\", label: \"字段名\",},\r\n              {type: \"text\", prop: \"prop\", label: \"后端字段\",},\r\n              {\r\n                  type: \"select\",\r\n                  prop: \"type\",\r\n                  label: \"类型\",\r\n                  default: \"text\",\r\n                  options: [\r\n                      { label: \"文本\", value: \"text\" },\r\n                      { label: \"下拉框\", value: \"select\" },\r\n                  ]\r\n              },\r\n              {\r\n                  type: \"more\",\r\n                  label: \"选项\",\r\n                  width: 60,\r\n                  schemas: [\r\n                      {\r\n                          type: \"radio\",\r\n                          prop: \"optionType\",\r\n                          label: \"类型\",\r\n                          default: \"fixed\",\r\n                          options: [\r\n                              { label: \"固定项\", value: \"fixed\" },\r\n                              { label: \"接口\", value: \"api\" },\r\n                          ],\r\n                          effect({model, schemas}) {\r\n                              if (model.optionType === \"api\") {\r\n                                  return [\r\n                                      { type: \"text\",  prop: \"api\", label: \"接口地址\", },\r\n                                      { type: \"text\",  prop: \"depProp\", label: \"关联后端字段\", placeholder: \"逗号分割，当这些字段有值时才调接口\" }\r\n                                  ]\r\n                              } else {\r\n                                  return [\r\n                                      {\r\n                                          type: \"list\",\r\n                                          prop: \"options\",\r\n                                          label: \"选项\",\r\n                                          schemas: [\r\n                                              { type: \"text\", prop: \"label\", label: \"键\", },\r\n                                              { type: \"text\", prop: \"value\", label: \"值\", },\r\n                                          ]\r\n                                      }\r\n                                  ]\r\n                              }\r\n                          }\r\n                      },\r\n                  ]\r\n              },\r\n          ]\r\n      },\r\n      {\r\n          type: \"code\",\r\n          prop: \"queryTransform\",\r\n          label: \"参数格式化\",\r\n          tips: `\r\n<div style=\"line-height: 20px;\">\r\n<p>自定义一个用于格式化查询参数的方法，默认{ query, pageSize, pageNum }。</p>\r\n<p>须遵循ES规范，示例如下：</p>\r\n<div style=\"margin-top: 6px;background: #f2f4fa;padding: 4px 8px;\">\r\n<pre>\r\nexport default function({\r\nquery,\r\npageSize,\r\npageNum\r\n}) {\r\nreturn {\r\n  query: { ...query, category: 1 },\r\n  pageSize,\r\n  pageNum\r\n}\r\n}\r\n</pre>\r\n</div>\r\n</div>\r\n`\r\n      },\r\n      {\r\n          type: \"switch\",\r\n          prop: \"hasAdd\",\r\n          label: \"新增\",\r\n          effect({model, schemas, resolveSchemas}) {\r\n              if (model.hasAdd) {\r\n                  return {\r\n                      prop: \"addForm\",\r\n                      schemas: resolveSchemas(\"dialog-form\")\r\n                  }\r\n              }\r\n          }\r\n      },\r\n      {\r\n          type: \"switch\",\r\n          prop: \"hasUpdate\",\r\n          label: \"编辑\",\r\n          effect({model, schemas, resolveSchemas}) {\r\n              if (model.hasUpdate) {\r\n                  return {\r\n                      prop: \"updateForm\",\r\n                      schemas: resolveSchemas(\"dialog-form\")\r\n                  }\r\n              }\r\n          }\r\n      },\r\n      {type: \"switch\", prop: \"hasIndex\", label: \"序号\", default: true},\r\n      {type: \"switch\", prop: \"hasPagination\", label: \"分页\", default: true},\r\n      {\r\n          type: \"switch\",\r\n          prop: \"hasDelete\",\r\n          label: \"删除\",\r\n          effect({model, schemas}) {\r\n              if (model.hasDelete) {\r\n                  return [\r\n                      {\r\n                          type: \"text\",\r\n                          prop: \"deleteApi\",\r\n                          label: \"接口地址\"\r\n                      }\r\n                  ]\r\n              }\r\n          }\r\n      },\r\n      {\r\n          type: \"switch\",\r\n          prop: \"hasBatchDelete\",\r\n          label: \"批量删除\",\r\n          effect({model, schemas}) {\r\n              if (model.hasBatchDelete) {\r\n                  return [\r\n                      {\r\n                          type: \"text\",\r\n                          prop: \"batchDeleteApi\",\r\n                          label: \"接口地址\"\r\n                      }\r\n                  ]\r\n              }\r\n          }\r\n      },\r\n      {\r\n          type: \"switch\",\r\n          prop: \"hasToggleEnable\",\r\n          label: \"启用禁用\",\r\n          effect({model, schemas}) {\r\n              if (model.hasToggleEnable) {\r\n                  return [\r\n                      {\r\n                          type: \"text\",\r\n                          prop: \"enableProp\",\r\n                          label: \"字段\",\r\n                          default: \"enable\"\r\n                      },\r\n                      {\r\n                          type: \"text\",\r\n                          prop: \"toggleEnableApi\",\r\n                          label: \"接口地址\"\r\n                      }\r\n                  ]\r\n              }\r\n          }\r\n      },\r\n      {\r\n          type: \"switch\",\r\n          prop: \"hasMove\",\r\n          label: \"上移下移\",\r\n          effect({model, schemas}) {\r\n              if (model.hasMove) {\r\n                  return [\r\n                      {\r\n                          type: \"text\",\r\n                          prop: \"moveApi\",\r\n                          label: \"接口地址\"\r\n                      }\r\n                  ]\r\n              }\r\n          }\r\n      },\r\n  ]\r\n</script>";

var template = "<template>\r\n  <div class=\"container\">\r\n      <div style=\"display:flex;<%= searchItems.length ? '' : 'justify-content: flex-end;' %>\">\r\n          <% if (searchItems.length) { %>\r\n              <el-form size=\"mini\" inline style=\"flex: 1;\">\r\n                  <% searchItems.forEach(function(item){ %>\r\n                      <el-form-item label=\"<%= item.label %>\">\r\n                          <% if (item.type === \"text\") { %>\r\n                              <el-input clearable v-model=\"query.<%= item.prop %>\" @change=\"handleSearch\"/>\r\n                          <% } %>\r\n                          <% if (item.type === \"select\") { %>\r\n                              <el-select clearable v-model=\"query.<%= item.prop %>\" @change=\"handleSearch\" placeholder=\"请选择<%= item.label %>\">\r\n                                  <el-option v-for=\"{label, value} in <%= item.prop %>Options\" :key=\"value\" :value=\"value\" :label=\"label\" />\r\n                              </el-select>\r\n                          <% } %>\r\n                      </el-form-item>\r\n                  <% }) %>\r\n                  <el-form-item>\r\n                      <el-button @click=\"handleSearch\" type=\"primary\">查询</el-button>\r\n                  </el-form-item>\r\n              </el-form>\r\n          <% } %>\r\n          <% if (hasBatchDelete || hasAdd) { %>\r\n              <div class=\"table-tool\">\r\n                  <% if (hasBatchDelete) { %>\r\n                      <el-button size=\"mini\" type=\"danger\" plain :disabled=\"!selections.length\" @click=\"handleBatchDelete\">\r\n                          批量删除\r\n                      </el-button>\r\n                  <% } %>\r\n                  <% if (hasAdd) { %>\r\n                      <el-button size=\"mini\" :icon=\"Plus\" @click=\"handleAdd\" type=\"primary\">添加</el-button>\r\n                  <% } %>\r\n              </div>\r\n          <% } %>\r\n      </div>\r\n      <el-table size=\"small\" border style=\"margin-top: -6px\" :data=\"tableData\" v-loading=\"pending\" ref=\"tableRef\" <% if (hasBatchDelete) { %> @select=\"handleSelect\" @select-all=\"handleSelectAll\" <% } %>>\r\n          <% if (hasSelection || hasBatchDelete) { %>\r\n              <el-table-column type=\"selection\" width=\"55\" align=\"center\"/>\r\n          <% } %>\r\n          <% if (hasIndex) { %>\r\n              <el-table-column type=\"index\" label=\"序号\" width=\"55\" align=\"center\" :index=\"indexMethod\"/>\r\n          <% } %>\r\n          <% tableCols.forEach(function(item){ %>\r\n              <el-table-column\r\n                  label=\"<%= item.label %>\"\r\n                  prop=\"<%= item.prop %>\"\r\n                  <% if (item.width) { %>width=\"<%= item.width %>\"<% } %>\r\n                  <% if (item.formatter) { %>:formatter=\"<%= item.prop%>Formatter\"<% } %>\r\n              />\r\n          <% }) %>\r\n          <% if (hasUpdate || hasDelete || hasToggleEnable || hasMove) { %>\r\n              <el-table-column label=\"操作\" width=\"176\">\r\n                  <template #default=\"{row}\">\r\n                      <% if (hasUpdate) { %>\r\n                          <el-button size=\"small\" type=\"text\" @click=\"handleUpdate(row)\">编辑</el-button>\r\n                          <el-divider direction=\"vertical\"/>\r\n                      <% } %>\r\n                      <% if (hasDelete) { %>\r\n                          <el-button size=\"small\" type=\"text\" @click=\"handleDelete(row)\">删除</el-button>\r\n                          <el-divider direction=\"vertical\"/>\r\n                      <% } %>\r\n                      <% if (hasToggleEnable) { %>\r\n                          <el-button size=\"small\" type=\"text\" @click=\"handleToggleEnable(row)\">\r\n                              {{ row.<%= enableProp %> ? \"禁用\" : \"启用\" }}\r\n                          </el-button>\r\n                          <el-divider direction=\"vertical\"/>\r\n                      <% } %>\r\n                      <% if (hasMove) { %>\r\n                          <el-button size=\"small\" type=\"text\" @click=\"handleMove(row, 1)\">上移</el-button>\r\n                          <el-divider direction=\"vertical\"/>\r\n                          <el-button size=\"small\" type=\"text\" @click=\"handleMove(row, 0)\">下移</el-button>\r\n                      <% } %>\r\n                  </template>\r\n              </el-table-column>\r\n          <% } %>\r\n      </el-table>\r\n      <% if (hasPagination) { %>\r\n          <el-pagination\r\n              style=\"margin-top: 16px;text-align: right;\"\r\n              small\r\n              background\r\n              layout=\"total, prev, pager, next, jumper\"\r\n              :total=\"total\"\r\n              :page-size=\"pageSize\"\r\n              :current-page=\"pageNum\"\r\n              @sizeChange=\"handleSizeChange\"\r\n              @currentChange=\"handleCurrentChange\"\r\n          />\r\n      <% } %>\r\n      <% if (hasAdd) { %>\r\n          <add-form v-model=\"add.visible\" :data=\"add.data\" :title=\"add.title\"/>\r\n      <% } %>\r\n  </div>\r\n</template>\r\n<script setup>\r\n  import { reactive, onBeforeMount, watch, <% if (hasBatchDelete) { %> nextTick <% } %> } from \"vue\";\r\n  <% if (hasDelete || hasBatchDelete) { %>\r\n  import { ElMessageBox, ElMessage } from 'element-plus'\r\n  <% } %>\r\n  <% if (hasAdd) { %>\r\n  import { Plus } from \"@element-plus/icons-vue\"\r\n  import AddForm from \"<%= $imports.getFilePath(\"component\", \"AddForm\") %>\"\r\n  <% } %>\r\n  import {\r\n      getTableData,\r\n  <% if (hasDelete) { %>\r\n      doDelete,\r\n  <% } %>\r\n  <% if (hasBatchDelete) { %>\r\n      doBatchDelete,\r\n  <% } %>\r\n  <% if (hasToggle) { %>\r\n      doToggle,\r\n  <% } %>\r\n  <% if (hasMove) { %>\r\n      doMove,\r\n  <% } %>\r\n  <% searchItems.forEach(function(item){ %>\r\n      <% if (item.type === \"select\" && item.optionType === \"api\") { %>\r\n      get<%= $imports.firstToUpperCase(item.prop) %>Options,\r\n      <% } %>\r\n  <% }) %>\r\n  } from \"<%= $imports.getFilePath(\"service\") %>\"\r\n\r\n  const query = reactive({})\r\n  let pending = $ref(false)\r\n  let pageSize = $ref(10)\r\n  let pageNum = $ref(1)\r\n  let total = $ref(0)\r\n  let tableData = $ref([])\r\n  <% if (hasBatchDelete) { %>\r\n  let selectionLen = 0\r\n  let selectionMap = $ref({})\r\n  const rowKey = \"id\"\r\n  const selections = $computed(() => Object.values(selectionMap))\r\n  const tableRef = $ref()\r\n  <% } %>\r\n\r\n  <% searchItems.forEach(function(item){ %>\r\n  <% if (item.type === \"select\") { %>\r\n  <% if (item.optionType === \"fixed\") { %>\r\n  let <%= item.prop %>Options = [\r\n      <% item.options.forEach(function(item){ %>\r\n      { label: \"<%= item.label %>\", value: \"<%= item.value %>\" },\r\n      <% }) %>\r\n  ]\r\n  <% } %>\r\n  <% if (item.optionType === \"api\") { %>\r\n  // <%= item.label %>选项\r\n  let <%= item.prop %>Options = $ref([])\r\n  <% if (item.depProp) { %>\r\n  watch([<% $imports.split(item.depProp, \",\").forEach(function(item){  %> query.<%= item %>, <% }) %>], async (value) => {\r\n      if (value) {\r\n          const { status, data, message } = await get<%= $imports.firstToUpperCase(item.prop) %>Options()\r\n          if (status) {\r\n              <%= item.prop %>Options = data\r\n          } else {\r\n              ElMessage.error(message)\r\n          }\r\n      }\r\n  }, {\r\n      immediate: true\r\n  })\r\n  <% } %>\r\n  <% if (!item.depProp) { %>\r\n  onBeforeMount(async () => {\r\n      const { status, data, message } = await get<%= $imports.firstToUpperCase(item.prop) %>Options()\r\n      if (status) {\r\n          <%= item.prop %>Options = data\r\n      } else {\r\n          ElMessage.error(message)\r\n      }\r\n  })\r\n  <% } %>\r\n  <% } %>\r\n  <% } %>\r\n  <% }) %>\r\n\r\n  <% if (queryTransform) { %>\r\n  // 转换查询参数\r\n  <%- $imports.parseDefaultFunction(queryTransform, \"queryTransform\") %>\r\n  <% } %>\r\n\r\n  // 获取表格数据\r\n  async function updateTable() {\r\n      pending = true\r\n      try {\r\n          const { status, data, message } = await getTableData(\r\n          <% if (queryTransform) { %>queryTransform(<% } %>\r\n              {\r\n                  query,\r\n                  pageNum,\r\n                  pageSize\r\n              }\r\n          <% if (queryTransform) { %>)<% } %>\r\n          )\r\n          if (status) {\r\n              tableData = data.result\r\n              total = data.total\r\n              tableData = [{}]\r\n          } else {\r\n              ElMessage.error(message)\r\n          }\r\n      } finally {\r\n          pending = false\r\n          <% if (hasBatchDelete) { %>\r\n          nextTick(() => {\r\n              tableData.forEach((row) => {\r\n                  tableRef.toggleRowSelection(row, !!selectionMap[row[rowKey]])\r\n              })\r\n              selectionLen = tableData.filter(row => !!selectionMap[row[rowKey]]).length\r\n          })\r\n          <% } %>\r\n      }\r\n  }\r\n\r\n  function handleSearch() {\r\n      <% if (hasPagination) { %>\r\n      handleCurrentChange(1)\r\n      <% } %>\r\n      <% if (!hasPagination) { %>\r\n      updateTable()\r\n      <% } %>\r\n  }\r\n\r\n  <% if (hasPagination) { %>\r\n  function handleCurrentChange (val) {\r\n      pageNum = val\r\n      updateTable()\r\n  }\r\n\r\n  function handleSizeChange (val) {\r\n      pageSize = val\r\n      updateTable()\r\n  }\r\n  <% } %>\r\n\r\n  <% if (hasIndex) { %>\r\n  // 翻页序号\r\n  const indexMethod = (index) => pageSize * (pageNum - 1) + index + 1\r\n  <% } %>\r\n\r\n  onBeforeMount(handleSearch)\r\n\r\n  <% tableCols.forEach(function(item){ %>\r\n  <% if (item.formatter) { %>\r\n  // <%= item.label %>格式化\r\n  <%- $imports.parseDefaultFunction(item.formatter, item.prop + \"Formatter\") %>\r\n  <% } %>\r\n  <% }) %>\r\n  <% if (hasAdd) { %>\r\n  // 新增\r\n  const add = reactive({\r\n      visible: false,\r\n      data: {},\r\n      title: \"\"\r\n  })\r\n  function handleAdd() {\r\n      add.visible = true\r\n      add.data = {}\r\n      add.title = \"<%= addForm.title %>\"\r\n  }\r\n  <% } %>\r\n  <% if (hasUpdate) { %>\r\n  //编辑\r\n  const update = reactive({\r\n      visible: false,\r\n      data: {},\r\n      title: \"\"\r\n  })\r\n  function handleUpdate(row) {\r\n      update.visible = true\r\n      update.data = row\r\n      update.title = \"<%= updateForm.title %>\"\r\n  }\r\n  <% } %>\r\n  <% if (hasDelete) { %>\r\n  // 删除\r\n  function handleDelete() {\r\n      ElMessageBox.confirm('确认删除?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning',\r\n      }).then(async () => {\r\n          const { status, message } = await doDelete(row.id)\r\n          if (status) {\r\n              ElMessage.success(\"操作成功\")\r\n              updateTable()\r\n          } else {\r\n              ElMessage.error(message)\r\n          }\r\n      })\r\n  }\r\n  <% } %>\r\n\r\n  <% if (hasBatchDelete) { %>\r\n  // 翻页多选相关方法\r\n  function resetSelection(selectedRows) {\r\n      selectionMap = selectedRows ? selectedRows.reduce((acc, row) => ({...acc, [row[rowKey]]: row}), {}) : {}\r\n      selectionLen = data.filter(row => !!selectionMap[row[rowKey]]).length\r\n  }\r\n  function handleSelect(selection, row) {\r\n      if (selectionLen < selection.length) {\r\n          selectionMap[row[rowKey]] = row;\r\n      } else {\r\n          delete selectionMap[row[rowKey]];\r\n      }\r\n      selectionLen = selection.length;\r\n  }\r\n  function handleSelectAll(selection) {\r\n      if (selection.length) {\r\n          selection.forEach(row => {\r\n              selectionMap[row[rowKey]] = row;\r\n          });\r\n      } else {\r\n          tableData.forEach(row => {\r\n              delete selectionMap[row[rowKey]];\r\n          });\r\n      }\r\n      selectionLen = selection.length;\r\n  }\r\n  <% } %>\r\n\r\n  <% if (hasBatchDelete) { %>\r\n  // 批量删除\r\n  function handleBatchDelete() {\r\n      ElMessageBox.confirm('确认删除?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning',\r\n      }).then(async () => {\r\n          const { status, message } = await doBatchDelete(row.id)\r\n          if (status) {\r\n              ElMessage.success(\"操作成功\")\r\n              updateTable()\r\n          } else {\r\n              ElMessage.error(message)\r\n          }\r\n      })\r\n  }\r\n  <% } %>\r\n\r\n  <% if (hasToggleEnable) { %>\r\n  // 启用禁用\r\n  async function handleToggleEnable(row) {\r\n      const { status, message } = await doToggleEnable(row.id)\r\n      if (status) {\r\n          ElMessage.success(\"操作成功\")\r\n          updateTable()\r\n      } else {\r\n          ElMessage.error(message)\r\n      }\r\n  }\r\n  <% } %>\r\n\r\n  <% if (hasMove) { %>\r\n  // 上移下移\r\n  async function handleMove(row) {\r\n      const { status, message } = await doMove(row.id)\r\n      if (status) {\r\n          ElMessage.success(\"操作成功\")\r\n          updateTable()\r\n      } else {\r\n          ElMessage.error(message)\r\n      }\r\n  }\r\n  <% } %>\r\n\r\n</script>\r\n\r\n<style>\r\n  .container {\r\n      background: #fff;\r\n      padding: 10px;\r\n  }\r\n</style>";

function components({name, data, resolveComponents}) {
  return [
    {
      template,
      name,
      data,
    },
    data.hasAdd && resolveComponents("dialog-form", {
      name: "AddForm",
      data: data.addForm
    }),
    data.hasUpdate && resolveComponents("dialog-form", {
      name: "UpdateForm",
      data: data.updateForm
    }),
  ].filter(Boolean)
}

function services ({data, utils, name, resolveServices}) {
  const {firstToUpperCase} = utils;
  return [
    {
      name,
      services: [
        {
          name: "getTableData",
          method: "post",
          api: "/api/pageList",
        },
        data.hasDelete && {
          name: "doDelete",
          method: "post",
          api: data.deleteApi,
        },
        data.hasBatchDelete && {
          name: "doBatchDelete",
          method: "post",
          api: data.batchDeleteApi,
        },
        data.hasToggleEnable && {
          name: "doToggleEnable",
          method: "post",
          api: data.toggleEnableApi,
        },
        data.hasMove && {
          name: "doMove",
          method: "post",
          api: data.moveApi,
        },
        ...data.searchItems.filter(d => d.type === "select" && d.optionType === "api").map((item) => {
          return {
            name: `get${firstToUpperCase(item.prop)}Options`,
            method: "get",
            api: item.api,
          }
        })
      ]
    },
    data.hasAdd && resolveServices("dialog-form", {
      name: "addForm",
      data: data.addForm
    }),
    data.hasUpdate && resolveServices("dialog-form", {
      name: "updateForm",
      data: data.updateForm
    })
  ]
}

var index = {
  schemas,
  components,
  services
};

module.exports = index;
